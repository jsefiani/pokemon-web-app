{"version":3,"sources":["resolvers.js","schema.js","graphql.js","components/PokemonList/PokemonList.styles.jsx","components/PokemonList/index.jsx","components/PokemonStats/index.jsx","components/PokemonSelectedMoves/index.jsx","components/PokemonAvatar/index.jsx","components/PokemonMoves/PokemonMoves.styles.jsx","components/PokemonMoves/index.jsx","components/_common/_common.styles.jsx","components/PokemonDetails/index.jsx","components/PokemonSquadList/index.jsx","App.js","index.js"],"names":["resolvers","Pokemon","selectedMoves","Mutation","setPokemonName","_root","name","cache","GET_POKEMON_NAME","gql","writeData","query","data","selectedPokemonName","togglePokemonMove","id","selectedPokemonMove","GET_POKEMON","readQuery","variables","hasBeenSelected","some","length","filter","__typename","writeQuery","addPokemonToSquadList","GET_POKEMON_SQUADLIST","pokemonSquadList","newPokemonSquadList","typeDefs","InMemoryCache","ApolloClient","uri","process","clientState","defaults","PokemonListContainer","styled","ul","PokemonListItemContainer","li","Container","div","GET_POKEMONS","SET_POKEMON_NAME","PokemonList","props","useState","setFilter","useQuery","loading","useMutation","filteredPokemons","Pokemons","pokemon","startsWith","toLowerCase","placeholder","onChange","value","target","map","key","onClick","PokemonStats","stats","Row","Col","xs","PokemonSelectedMoves","learnMethod","PokemonAvatar","imageUrl","alt","src","PokemonDetailsMovesContainer","GET_SELECTED_POKEMON_NAME","TOGGLE_POKEMON_MOVE","PokemonMoves","moves","index","PokemonDetailsHeading","h4","ADD_POKEMON_TO_SQUADLIST","PokemonDetails","hasOwnProperty","fluid","image","PokemonSquadList","pokemonMove","numberOfEmptyCardsToRender","nodes","i","push","renderEmptyCards","Logo","img","Layout","App","client","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.533f1adc.chunk.js","sourcesContent":["import { gql } from 'apollo-boost';\r\n\r\nexport const resolvers = {\r\n\tPokemon: {\r\n\t\t// ? Adding this property to existing Pokemon type\r\n\t\tselectedMoves: () => []\r\n\t},\r\n\tMutation: {\r\n\t\tsetPokemonName: (_root, { name }, { cache }) => {\r\n\t\t\tconst GET_POKEMON_NAME = gql`\r\n\t\t\t\t{\r\n\t\t\t\t\tselectedPokemonName @client\r\n\t\t\t\t}\r\n\t\t\t`;\r\n\t\t\tcache.writeData({\r\n\t\t\t\tquery: GET_POKEMON_NAME,\r\n\t\t\t\tdata: { selectedPokemonName: name }\r\n\t\t\t});\r\n\r\n\t\t\treturn name;\r\n\t\t},\r\n\t\ttogglePokemonMove: (\r\n\t\t\t_root,\r\n\t\t\t{ id, name, selectedPokemonMove },\r\n\t\t\t{ cache }\r\n\t\t) => {\r\n\t\t\tconst GET_POKEMON = gql`\r\n\t\t\t\tquery GetPokemon($name: String!) {\r\n\t\t\t\t\tPokemon(name: $name) @client {\r\n\t\t\t\t\t\tid\r\n\t\t\t\t\t\tselectedMoves\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t`;\r\n\t\t\tconst { Pokemon } = cache.readQuery({\r\n\t\t\t\tid,\r\n\t\t\t\tquery: GET_POKEMON,\r\n\t\t\t\tvariables: { name }\r\n\t\t\t});\r\n\r\n\t\t\t// ? Here we check whether the pokemon move has been selected before in order to determine whether we need to remove it or not\r\n\t\t\tconst hasBeenSelected = Pokemon.selectedMoves.some(\r\n\t\t\t\t({ name }) => name === selectedPokemonMove.name\r\n\t\t\t);\r\n\r\n\t\t\tif (!hasBeenSelected && Pokemon.selectedMoves.length > 3)\r\n\t\t\t\treturn Pokemon.selectedMoves;\r\n\r\n\t\t\tconst data = hasBeenSelected\r\n\t\t\t\t? {\r\n\t\t\t\t\t\tPokemon: {\r\n\t\t\t\t\t\t\t...Pokemon,\r\n\t\t\t\t\t\t\tselectedMoves: [\r\n\t\t\t\t\t\t\t\t...Pokemon.selectedMoves.filter(\r\n\t\t\t\t\t\t\t\t\t({ name }) =>\r\n\t\t\t\t\t\t\t\t\t\tname !== selectedPokemonMove.name\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t}\r\n\t\t\t\t  }\r\n\t\t\t\t: {\r\n\t\t\t\t\t\tPokemon: {\r\n\t\t\t\t\t\t\t...Pokemon,\r\n\t\t\t\t\t\t\tselectedMoves: [\r\n\t\t\t\t\t\t\t\t...Pokemon.selectedMoves,\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t...selectedPokemonMove,\r\n\t\t\t\t\t\t\t\t\t__typename: 'PokemonMove'\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t}\r\n\t\t\t\t  };\r\n\r\n\t\t\tcache.writeQuery({\r\n\t\t\t\tid,\r\n\t\t\t\tquery: GET_POKEMON,\r\n\t\t\t\tdata,\r\n\t\t\t\tvariables: { name }\r\n\t\t\t});\r\n\r\n\t\t\treturn data.Pokemon.selectedMoves;\r\n\t\t},\r\n\t\taddPokemonToSquadList: (_root, { name, id }, { cache }) => {\r\n\t\t\tconst GET_POKEMON = gql`\r\n\t\t\t\tquery GetPokemon($name: String!) {\r\n\t\t\t\t\tPokemon(name: $name) @client {\r\n\t\t\t\t\t\tid\r\n\t\t\t\t\t\tname\r\n\t\t\t\t\t\timage\r\n\t\t\t\t\t\tselectedMoves\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t`;\r\n\r\n\t\t\tconst GET_POKEMON_SQUADLIST = gql`\r\n\t\t\t\t{\r\n\t\t\t\t\tpokemonSquadList @client\r\n\t\t\t\t}\r\n\t\t\t`;\r\n\r\n\t\t\tconst { Pokemon } = cache.readQuery({\r\n\t\t\t\tquery: GET_POKEMON,\r\n\t\t\t\tvariables: { name }\r\n\t\t\t});\r\n\r\n\t\t\tconst { pokemonSquadList } = cache.readQuery({\r\n\t\t\t\tquery: GET_POKEMON_SQUADLIST\r\n\t\t\t});\r\n\r\n\t\t\tif (pokemonSquadList.length > 5) return pokemonSquadList;\r\n\r\n\t\t\tconst newPokemonSquadList = [...pokemonSquadList, Pokemon];\r\n\r\n\t\t\tcache.writeQuery({\r\n\t\t\t\tquery: GET_POKEMON_SQUADLIST,\r\n\t\t\t\tdata: { pokemonSquadList: newPokemonSquadList }\r\n\t\t\t});\r\n\r\n\t\t\treturn newPokemonSquadList;\r\n\t\t}\r\n\t}\r\n};\r\n","import { gql } from 'apollo-boost';\r\n\r\nexport const typeDefs = gql`\r\n\textend type Pokemon {\r\n\t\tselectedMoves: [SelectedPokemonMove!]!\r\n\t\tmoves: [PokemonMove!]!\r\n\t}\r\n\r\n\ttype SelectedPokemonMove {\r\n\t\tlearnMethod: String!\r\n\t\tname: String!\r\n\t}\r\n\r\n\ttype PokemonMove {\r\n\t\tlearnMethod: String!\r\n\t\tname: String!\r\n\t\tisSelected: Boolean!\r\n\t}\r\n\r\n\ttype PokemonSquadListMember {\r\n\t\tname: String!\r\n\t\timage: String!\r\n\t\tselectedMoves: [SelectedPokemonMove!]!\r\n\t}\r\n\r\n\textend type Query {\r\n\t\tPokemon(name: String!): Pokemon!\r\n\t\tselectedPokemonName: String!\r\n\t\tpokemonSquadList: [PokemonSquadListMember!]!\r\n\t}\r\n\r\n\textend type Mutation {\r\n\t\tSetPokemonName(name: String!): selectedPokemonName!\r\n\t\tTogglePokemonMove(\r\n\t\t\tid: ID!\r\n\t\t\tname: String!\r\n\t\t\tselectedPokemonMove: SelectedPokemonMove!\r\n\t\t): [SelectedPokemonMove!]!\r\n\t\tAddPokemonToSquadList(\r\n\t\t\tname: String!\r\n\t\t\tid: ID!\r\n\t\t): [PokemonSquadListMember!]!\r\n\t}\r\n`;\r\n","import ApolloClient, { InMemoryCache } from 'apollo-boost';\r\n\r\nimport { resolvers } from './resolvers';\r\nimport { typeDefs } from './schema';\r\n\r\n// ? Configure Apollo\r\nconst cache = new InMemoryCache();\r\nexport default new ApolloClient({\r\n\turi: process.env.REACT_APP_POKE_ENDPOINT,\r\n\tclientState: {\r\n\t\tcache,\r\n\t\tdefaults: {\r\n\t\t\tselectedPokemonName: '',\r\n\t\t\tpokemonSquadList: []\r\n\t\t},\r\n\t\tresolvers\r\n\t},\r\n\ttypeDefs\r\n});\r\n","import styled from 'styled-components';\r\n\r\nexport const PokemonListContainer = styled.ul`\r\n\tpadding: 0;\r\n\theight: 300px;\r\n\toverflow-y: scroll;\r\n\twidth: 200px;\r\n`;\r\n\r\nexport const PokemonListItemContainer = styled.li`\r\n\tcursor: pointer;\r\n\tpadding: 10px 5px;\r\n`;\r\n\r\nexport const Container = styled.div`\r\n\tmargin-right: 30px;\r\n`;\r\n","import React, { useState } from 'react';\r\nimport { gql } from 'apollo-boost';\r\nimport { useQuery, useMutation } from '@apollo/react-hooks';\r\n\r\nimport {\r\n\tPokemonListContainer,\r\n\tPokemonListItemContainer,\r\n\tContainer\r\n} from './PokemonList.styles';\r\n\r\nconst GET_POKEMONS = gql`\r\n\t{\r\n\t\tPokemons {\r\n\t\t\tid\r\n\t\t\tname\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst SET_POKEMON_NAME = gql`\r\n\tmutation SetPokemonName($name: String!) {\r\n\t\tsetPokemonName(name: $name) @client\r\n\t}\r\n`;\r\n\r\nconst PokemonList = props => {\r\n\tconst [filter, setFilter] = useState('');\r\n\r\n\tconst { data, loading } = useQuery(GET_POKEMONS);\r\n\t// ? This mutation sets the pokemon name so that we can later query it and make an API call with that value\r\n\tconst [setPokemonName] = useMutation(SET_POKEMON_NAME);\r\n\r\n\t// ? Client-side filtering\r\n\tlet filteredPokemons = [];\r\n\tif (!loading) {\r\n\t\tfilteredPokemons = data.Pokemons.filter(pokemon =>\r\n\t\t\tpokemon.name.startsWith(filter.toLowerCase())\r\n\t\t);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Container>\r\n\t\t\t<p>Select a pokemon</p>\r\n\t\t\t<input\r\n\t\t\t\tplaceholder=\"TYPE TO FILTER\"\r\n\t\t\t\tonChange={({ target: { value } }) => setFilter(value)}\r\n\t\t\t/>\r\n\t\t\t<PokemonListContainer>\r\n\t\t\t\t{loading ? (\r\n\t\t\t\t\t<p>Loading...</p>\r\n\t\t\t\t) : (\r\n\t\t\t\t\tfilteredPokemons.map(({ id, name }) => (\r\n\t\t\t\t\t\t<PokemonListItemContainer\r\n\t\t\t\t\t\t\tkey={id}\r\n\t\t\t\t\t\t\tonClick={() =>\r\n\t\t\t\t\t\t\t\tsetPokemonName({ variables: { name } })\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{name}\r\n\t\t\t\t\t\t</PokemonListItemContainer>\r\n\t\t\t\t\t))\r\n\t\t\t\t)}\r\n\t\t\t</PokemonListContainer>\r\n\t\t</Container>\r\n\t);\r\n};\r\n\r\nexport default PokemonList;\r\n","import React from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nconst PokemonStats = ({ stats }) => (\r\n\t<Row>\r\n\t\t{stats.map(({ name, value }) => (\r\n\t\t\t<Col xs={6} key={`${name}_${value}`}>\r\n\t\t\t\t<Row>\r\n\t\t\t\t\t<Col>{name}</Col>\r\n\t\t\t\t\t<Col>{value}</Col>\r\n\t\t\t\t</Row>\r\n\t\t\t</Col>\r\n\t\t))}\r\n\t</Row>\r\n);\r\n\r\nexport default PokemonStats;\r\n","import React from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nconst PokemonSelectedMoves = ({ selectedMoves }) => (\r\n\t<Row>\r\n\t\t{selectedMoves.map(({ learnMethod, name }) => (\r\n\t\t\t<Col xs={6} key={`${learnMethod}_${name}`}>\r\n\t\t\t\t{learnMethod}\r\n\t\t\t\t<Col>{name}</Col>\r\n\t\t\t</Col>\r\n\t\t))}\r\n\t</Row>\r\n);\r\n\r\nexport default PokemonSelectedMoves;\r\n","import React from 'react';\r\n\r\nconst PokemonAvatar = ({ imageUrl }) => <img alt=\"Pokemon\" src={imageUrl} />;\r\n\r\nexport default PokemonAvatar;\r\n","import styled from 'styled-components';\r\n\r\nexport const PokemonDetailsMovesContainer = styled.ul`\r\n\tpadding: 0;\r\n\theight: 300px;\r\n\toverflow-y: scroll;\r\n`;\r\n","import React from 'react';\r\nimport { useMutation, useQuery } from '@apollo/react-hooks';\r\nimport { gql } from 'apollo-boost';\r\n\r\nimport { PokemonDetailsMovesContainer } from './PokemonMoves.styles';\r\n\r\nconst GET_SELECTED_POKEMON_NAME = gql`\r\n\t{\r\n\t\tselectedPokemonName @client\r\n\t}\r\n`;\r\n\r\nconst TOGGLE_POKEMON_MOVE = gql`\r\n\tmutation TogglePokemonMove(\r\n\t\t$name: String\r\n\t\t$selectedPokemonMove: SelectedPokemonMove!\r\n\t\t$id: ID!\r\n\t) {\r\n\t\ttogglePokemonMove(\r\n\t\t\tname: $name\r\n\t\t\tselectedPokemonMove: $selectedPokemonMove\r\n\t\t\tid: $id\r\n\t\t) @client\r\n\t}\r\n`;\r\n\r\nconst PokemonMoves = ({ moves }) => {\r\n\tconst {\r\n\t\tdata: { selectedPokemonName }\r\n\t} = useQuery(GET_SELECTED_POKEMON_NAME);\r\n\tconst [togglePokemonMove] = useMutation(TOGGLE_POKEMON_MOVE);\r\n\r\n\treturn (\r\n\t\t<PokemonDetailsMovesContainer>\r\n\t\t\t{moves.map(({ name, learnMethod }, index) => (\r\n\t\t\t\t<li\r\n\t\t\t\t\tkey={index}\r\n\t\t\t\t\tonClick={() =>\r\n\t\t\t\t\t\ttogglePokemonMove({\r\n\t\t\t\t\t\t\tvariables: {\r\n\t\t\t\t\t\t\t\tname: selectedPokemonName,\r\n\t\t\t\t\t\t\t\tselectedPokemonMove: {\r\n\t\t\t\t\t\t\t\t\tname,\r\n\t\t\t\t\t\t\t\t\tlearnMethod\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t>\r\n\t\t\t\t\t{name}\r\n\t\t\t\t</li>\r\n\t\t\t))}\r\n\t\t</PokemonDetailsMovesContainer>\r\n\t);\r\n};\r\n\r\nexport default PokemonMoves;\r\n","import styled from 'styled-components';\r\n\r\nexport const PokemonDetailsHeading = styled.h4`\r\n\ttext-transform: uppercase;\r\n`;\r\n","import React from 'react';\r\nimport { gql } from 'apollo-boost';\r\nimport { useQuery, useMutation } from '@apollo/react-hooks';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nimport PokemonStats from '../PokemonStats';\r\nimport PokemonSelectedMoves from '../PokemonSelectedMoves';\r\nimport PokemonAvatar from '../PokemonAvatar';\r\nimport PokemonMoves from '../PokemonMoves';\r\nimport { PokemonDetailsHeading } from '../_common/_common.styles';\r\n\r\nconst GET_SELECTED_POKEMON_NAME = gql`\r\n\t{\r\n\t\tselectedPokemonName @client\r\n\t}\r\n`;\r\n\r\nconst GET_POKEMON = gql`\r\n\tquery GetPokemon($name: String!) {\r\n\t\tPokemon(name: $name) {\r\n\t\t\tid\r\n\t\t\tname\r\n\t\t\timage\r\n\t\t\ttypes(first: 1) {\r\n\t\t\t\tname\r\n\t\t\t}\r\n\t\t\tabilities {\r\n\t\t\t\tname\r\n\t\t\t}\r\n\t\t\tstats {\r\n\t\t\t\tname\r\n\t\t\t\tvalue\r\n\t\t\t}\r\n\t\t\tmoves {\r\n\t\t\t\tlearnMethod\r\n\t\t\t\tname\r\n\t\t\t}\r\n\t\t\tselectedMoves @client\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst ADD_POKEMON_TO_SQUADLIST = gql`\r\n\tmutation AddPokemonToSquadList($name: String, $id: ID!) {\r\n\t\taddPokemonToSquadList(name: $name, id: $id) @client\r\n\t}\r\n`;\r\n\r\nconst PokemonDetails = props => {\r\n\tconst {\r\n\t\tdata: { selectedPokemonName }\r\n\t} = useQuery(GET_SELECTED_POKEMON_NAME);\r\n\r\n\tconst { data } = useQuery(GET_POKEMON, {\r\n\t\tvariables: { name: selectedPokemonName }\r\n\t});\r\n\r\n\tconst [addPokemonToSquadList] = useMutation(ADD_POKEMON_TO_SQUADLIST);\r\n\r\n\tif (!data?.hasOwnProperty('Pokemon')) return null;\r\n\r\n\treturn (\r\n\t\t<Container fluid={true}>\r\n\t\t\t<Row>\r\n\t\t\t\t<Col>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<PokemonAvatar imageUrl={data.Pokemon.image} />\r\n\t\t\t\t\t\t<h2>{data.Pokemon.name}</h2>\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tonClick={() =>\r\n\t\t\t\t\t\t\t\taddPokemonToSquadList({\r\n\t\t\t\t\t\t\t\t\tvariables: { name: selectedPokemonName }\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tSave Pokemon\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Col>\r\n\t\t\t\t<Col xs={6}>\r\n\t\t\t\t\t<PokemonDetailsHeading>Stats</PokemonDetailsHeading>\r\n\t\t\t\t\t<PokemonStats stats={data.Pokemon.stats} />\r\n\t\t\t\t\t<PokemonDetailsHeading>\r\n\t\t\t\t\t\tSelected moves\r\n\t\t\t\t\t</PokemonDetailsHeading>\r\n\t\t\t\t\t<PokemonSelectedMoves\r\n\t\t\t\t\t\tselectedMoves={data.Pokemon.selectedMoves}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Col>\r\n\t\t\t\t<Col>\r\n\t\t\t\t\t<PokemonDetailsHeading>Moves</PokemonDetailsHeading>\r\n\t\t\t\t\t<PokemonMoves moves={data.Pokemon.moves} />\r\n\t\t\t\t</Col>\r\n\t\t\t</Row>\r\n\t\t</Container>\r\n\t);\r\n};\r\n\r\nexport default PokemonDetails;\r\n","import React from 'react';\r\nimport { gql } from 'apollo-boost';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport PokemonAvatar from '../PokemonAvatar';\r\n\r\nconst GET_POKEMON_SQUADLIST = gql`\r\n\t{\r\n\t\tpokemonSquadList @client\r\n\t}\r\n`;\r\n\r\nconst PokemonSquadList = props => {\r\n\tconst {\r\n\t\tdata: { pokemonSquadList }\r\n\t} = useQuery(GET_POKEMON_SQUADLIST);\r\n\tconst renderEmptyCards = () => {\r\n\t\tconst numberOfEmptyCardsToRender = 6 - pokemonSquadList.length;\r\n\t\tconst nodes = [];\r\n\t\tfor (let i = 0; i < numberOfEmptyCardsToRender; i++) {\r\n\t\t\tnodes.push(<Col xs={2}>Empty</Col>);\r\n\t\t}\r\n\t\treturn nodes;\r\n\t};\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<p>Selected squad list</p>\r\n\t\t\t<Row>\r\n\t\t\t\t{pokemonSquadList.map(({ id, name, image, selectedMoves }) => (\r\n\t\t\t\t\t<Col xs={2}>\r\n\t\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t<Col xs={12}>\r\n\t\t\t\t\t\t\t\t<PokemonAvatar imageUrl={image} />\r\n\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t<Col xs={12}>\r\n\t\t\t\t\t\t\t\t<h4>{name}</h4>\r\n\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t\t\t{selectedMoves.map(pokemonMove => (\r\n\t\t\t\t\t\t\t\t\t<li key={id}>{pokemonMove.name}</li>\r\n\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t))}\r\n\t\t\t\t{renderEmptyCards()}\r\n\t\t\t</Row>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default PokemonSquadList;\r\n","import React, { Component } from 'react';\r\nimport { ApolloProvider } from '@apollo/react-hooks';\r\nimport styled from 'styled-components';\r\nimport client from './graphql';\r\n\r\nimport PokemonList from './components/PokemonList';\r\nimport PokemonDetails from './components/PokemonDetails';\r\nimport PokemonSquadList from './components/PokemonSquadList';\r\n\r\nconst Logo = styled.img`\r\n\tdisplay: block;\r\n\tmargin: 20px auto;\r\n\tmax-width: 200px;\r\n`;\r\n\r\nconst Container = styled.div`\r\n\tmax-width: 980px;\r\n\tmargin: 0 auto;\r\n`;\r\n\r\nconst Layout = styled.div`\r\n\tdisplay: flex;\r\n`;\r\n\r\nclass App extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<ApolloProvider client={client}>\r\n\t\t\t\t<Container>\r\n\t\t\t\t\t<Logo src=\"https://vignette.wikia.nocookie.net/logopedia/images/2/2b/Pokemon_2D_logo.svg/revision/latest/scale-to-width-down/639?cb=20170115063554\" />\r\n\t\t\t\t\t<Layout>\r\n\t\t\t\t\t\t<PokemonList />\r\n\t\t\t\t\t\t<PokemonDetails />\r\n\t\t\t\t\t</Layout>\r\n\t\t\t\t\t<PokemonSquadList />\r\n\t\t\t\t</Container>\r\n\t\t\t</ApolloProvider>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}